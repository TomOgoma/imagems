// Code generated by protoc-gen-go.
// source: github.com/tomogoma/imagems/server/proto/image.proto
// DO NOT EDIT!

/*
Package image is a generated protocol buffer package.

It is generated from these files:
	github.com/tomogoma/imagems/server/proto/image.proto

It has these top-level messages:
	NewImageRequest
	NewImageResponse
*/
package image

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NewImageRequest struct {
	Token  string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	UserID int64  `protobuf:"varint,2,opt,name=userID" json:"userID,omitempty"`
	Image  []byte `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (m *NewImageRequest) Reset()                    { *m = NewImageRequest{} }
func (m *NewImageRequest) String() string            { return proto.CompactTextString(m) }
func (*NewImageRequest) ProtoMessage()               {}
func (*NewImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewImageRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *NewImageRequest) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *NewImageRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type NewImageResponse struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Code     int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	ImageURL string `protobuf:"bytes,3,opt,name=imageURL" json:"imageURL,omitempty"`
	Detail   string `protobuf:"bytes,4,opt,name=detail" json:"detail,omitempty"`
}

func (m *NewImageResponse) Reset()                    { *m = NewImageResponse{} }
func (m *NewImageResponse) String() string            { return proto.CompactTextString(m) }
func (*NewImageResponse) ProtoMessage()               {}
func (*NewImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NewImageResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NewImageResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NewImageResponse) GetImageURL() string {
	if m != nil {
		return m.ImageURL
	}
	return ""
}

func (m *NewImageResponse) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func init() {
	proto.RegisterType((*NewImageRequest)(nil), "NewImageRequest")
	proto.RegisterType((*NewImageResponse)(nil), "NewImageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Publisher API

type Publisher interface {
	Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error
}

type publisher struct {
	c     client.Client
	topic string
}

func (p *publisher) Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error {
	return p.c.Publish(ctx, p.c.NewPublication(p.topic, msg), opts...)
}

func NewPublisher(topic string, c client.Client) Publisher {
	if c == nil {
		c = client.NewClient()
	}
	return &publisher{c, topic}
}

// Subscriber API

func RegisterSubscriber(topic string, s server.Server, h interface{}, opts ...server.SubscriberOption) error {
	return s.Subscribe(s.NewSubscriber(topic, h, opts...))
}

// Client API for Image service

type ImageClient interface {
	NewImage(ctx context.Context, in *NewImageRequest, opts ...client.CallOption) (*NewImageResponse, error)
}

type imageClient struct {
	c           client.Client
	serviceName string
}

func NewImageClient(serviceName string, c client.Client) ImageClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "image"
	}
	return &imageClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *imageClient) NewImage(ctx context.Context, in *NewImageRequest, opts ...client.CallOption) (*NewImageResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Image.NewImage", in)
	out := new(NewImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Image service

type ImageHandler interface {
	NewImage(context.Context, *NewImageRequest, *NewImageResponse) error
}

func RegisterImageHandler(s server.Server, hdlr ImageHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Image{hdlr}, opts...))
}

type Image struct {
	ImageHandler
}

func (h *Image) NewImage(ctx context.Context, in *NewImageRequest, out *NewImageResponse) error {
	return h.ImageHandler.NewImage(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/tomogoma/imagems/server/proto/image.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x86, 0x49, 0xda, 0x54, 0xed, 0x09, 0x41, 0x39, 0x21, 0x14, 0x75, 0x8a, 0x32, 0x65, 0x8a,
	0xc5, 0xc7, 0xc4, 0xcc, 0x52, 0x09, 0x31, 0x58, 0xea, 0x0f, 0x48, 0xeb, 0x53, 0x30, 0xe0, 0x5e,
	0xb1, 0x1d, 0xf8, 0xfb, 0x28, 0x97, 0x00, 0x52, 0xb6, 0x7b, 0xce, 0xd6, 0xf3, 0xbe, 0x36, 0x3c,
	0xb4, 0x36, 0xbe, 0x76, 0xfb, 0xfa, 0xc0, 0x4e, 0x45, 0x76, 0xdc, 0xb2, 0x6b, 0x94, 0x75, 0x4d,
	0x4b, 0x2e, 0xa8, 0x40, 0xfe, 0x8b, 0xbc, 0x3a, 0x79, 0x8e, 0x3c, 0x2c, 0x6b, 0x99, 0xcb, 0x1d,
	0x5c, 0xbe, 0xd0, 0xf7, 0xb6, 0xdf, 0x68, 0xfa, 0xec, 0x28, 0x44, 0xbc, 0x86, 0x2c, 0xf2, 0x3b,
	0x1d, 0xf3, 0xa4, 0x48, 0xaa, 0x95, 0x1e, 0x00, 0x6f, 0x60, 0xd1, 0x05, 0xf2, 0xdb, 0xa7, 0x3c,
	0x2d, 0x92, 0x6a, 0xa6, 0x47, 0xea, 0x6f, 0x8b, 0x2f, 0x9f, 0x15, 0x49, 0x75, 0xae, 0x07, 0x28,
	0xdf, 0x60, 0xfd, 0xaf, 0x0d, 0x27, 0x3e, 0x06, 0xc2, 0x0b, 0x48, 0xad, 0x19, 0xa5, 0xa9, 0x35,
	0x88, 0x30, 0x3f, 0xb0, 0x21, 0xf1, 0x65, 0x5a, 0x66, 0xdc, 0xc0, 0x52, 0x04, 0x3b, 0xfd, 0x2c,
	0xc2, 0x95, 0xfe, 0xe3, 0xbe, 0x81, 0xa1, 0xd8, 0xd8, 0x8f, 0x7c, 0x2e, 0x27, 0x23, 0xdd, 0x3d,
	0x42, 0x26, 0x41, 0x78, 0x0b, 0xcb, 0xdf, 0x50, 0x5c, 0xd7, 0x93, 0x67, 0x6d, 0xae, 0xea, 0x69,
	0xa3, 0xf2, 0x6c, 0xbf, 0x90, 0x5f, 0xb8, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x43, 0xd2,
	0xcc, 0x3d, 0x01, 0x00, 0x00,
}
